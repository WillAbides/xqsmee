// Code generated by MockGen. DO NOT EDIT.
// Source: queue.go

// Package mockqueue is a generated GoMock package.
package mockqueue

import (
	context "context"
	queue "github.com/WillAbides/xqsmee/queue"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockQueue is a mock of Queue interface
type MockQueue struct {
	ctrl     *gomock.Controller
	recorder *MockQueueMockRecorder
}

// MockQueueMockRecorder is the mock recorder for MockQueue
type MockQueueMockRecorder struct {
	mock *MockQueue
}

// NewMockQueue creates a new mock instance
func NewMockQueue(ctrl *gomock.Controller) *MockQueue {
	mock := &MockQueue{ctrl: ctrl}
	mock.recorder = &MockQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueue) EXPECT() *MockQueueMockRecorder {
	return m.recorder
}

// Peek mocks base method
func (m *MockQueue) Peek(arg0 context.Context, arg1 string, arg2 int64) ([]*queue.WebRequest, error) {
	ret := m.ctrl.Call(m, "Peek", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*queue.WebRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Peek indicates an expected call of Peek
func (mr *MockQueueMockRecorder) Peek(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peek", reflect.TypeOf((*MockQueue)(nil).Peek), arg0, arg1, arg2)
}

// Pop mocks base method
func (m *MockQueue) Pop(arg0 context.Context, arg1 string, arg2 time.Duration) (*queue.WebRequest, error) {
	ret := m.ctrl.Call(m, "Pop", arg0, arg1, arg2)
	ret0, _ := ret[0].(*queue.WebRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pop indicates an expected call of Pop
func (mr *MockQueueMockRecorder) Pop(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pop", reflect.TypeOf((*MockQueue)(nil).Pop), arg0, arg1, arg2)
}

// Push mocks base method
func (m *MockQueue) Push(arg0 context.Context, arg1 string, arg2 []*queue.WebRequest) error {
	ret := m.ctrl.Call(m, "Push", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push
func (mr *MockQueueMockRecorder) Push(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockQueue)(nil).Push), arg0, arg1, arg2)
}
