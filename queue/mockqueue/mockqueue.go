// Code generated by MockGen. DO NOT EDIT.
// Source: queue.pb.go

// Package mockqueue is a generated GoMock package.
package mockqueue

import (
	context "context"
	queue "github.com/WillAbides/xqsmee/queue"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockQueueClient is a mock of QueueClient interface
type MockQueueClient struct {
	ctrl     *gomock.Controller
	recorder *MockQueueClientMockRecorder
}

// MockQueueClientMockRecorder is the mock recorder for MockQueueClient
type MockQueueClientMockRecorder struct {
	mock *MockQueueClient
}

// NewMockQueueClient creates a new mock instance
func NewMockQueueClient(ctrl *gomock.Controller) *MockQueueClient {
	mock := &MockQueueClient{ctrl: ctrl}
	mock.recorder = &MockQueueClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueueClient) EXPECT() *MockQueueClientMockRecorder {
	return m.recorder
}

// Pop mocks base method
func (m *MockQueueClient) Pop(ctx context.Context, in *queue.PopRequest, opts ...grpc.CallOption) (*queue.PopResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Pop", varargs...)
	ret0, _ := ret[0].(*queue.PopResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pop indicates an expected call of Pop
func (mr *MockQueueClientMockRecorder) Pop(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pop", reflect.TypeOf((*MockQueueClient)(nil).Pop), varargs...)
}

// BPop mocks base method
func (m *MockQueueClient) BPop(ctx context.Context, in *queue.BPopRequest, opts ...grpc.CallOption) (*queue.BPopResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BPop", varargs...)
	ret0, _ := ret[0].(*queue.BPopResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BPop indicates an expected call of BPop
func (mr *MockQueueClientMockRecorder) BPop(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BPop", reflect.TypeOf((*MockQueueClient)(nil).BPop), varargs...)
}

// Peek mocks base method
func (m *MockQueueClient) Peek(ctx context.Context, in *queue.PeekRequest, opts ...grpc.CallOption) (*queue.PeekResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Peek", varargs...)
	ret0, _ := ret[0].(*queue.PeekResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Peek indicates an expected call of Peek
func (mr *MockQueueClientMockRecorder) Peek(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peek", reflect.TypeOf((*MockQueueClient)(nil).Peek), varargs...)
}

// Push mocks base method
func (m *MockQueueClient) Push(ctx context.Context, in *queue.PushRequest, opts ...grpc.CallOption) (*queue.PushResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Push", varargs...)
	ret0, _ := ret[0].(*queue.PushResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Push indicates an expected call of Push
func (mr *MockQueueClientMockRecorder) Push(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockQueueClient)(nil).Push), varargs...)
}

// MockQueueServer is a mock of QueueServer interface
type MockQueueServer struct {
	ctrl     *gomock.Controller
	recorder *MockQueueServerMockRecorder
}

// MockQueueServerMockRecorder is the mock recorder for MockQueueServer
type MockQueueServerMockRecorder struct {
	mock *MockQueueServer
}

// NewMockQueueServer creates a new mock instance
func NewMockQueueServer(ctrl *gomock.Controller) *MockQueueServer {
	mock := &MockQueueServer{ctrl: ctrl}
	mock.recorder = &MockQueueServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueueServer) EXPECT() *MockQueueServerMockRecorder {
	return m.recorder
}

// Pop mocks base method
func (m *MockQueueServer) Pop(arg0 context.Context, arg1 *queue.PopRequest) (*queue.PopResponse, error) {
	ret := m.ctrl.Call(m, "Pop", arg0, arg1)
	ret0, _ := ret[0].(*queue.PopResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pop indicates an expected call of Pop
func (mr *MockQueueServerMockRecorder) Pop(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pop", reflect.TypeOf((*MockQueueServer)(nil).Pop), arg0, arg1)
}

// BPop mocks base method
func (m *MockQueueServer) BPop(arg0 context.Context, arg1 *queue.BPopRequest) (*queue.BPopResponse, error) {
	ret := m.ctrl.Call(m, "BPop", arg0, arg1)
	ret0, _ := ret[0].(*queue.BPopResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BPop indicates an expected call of BPop
func (mr *MockQueueServerMockRecorder) BPop(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BPop", reflect.TypeOf((*MockQueueServer)(nil).BPop), arg0, arg1)
}

// Peek mocks base method
func (m *MockQueueServer) Peek(arg0 context.Context, arg1 *queue.PeekRequest) (*queue.PeekResponse, error) {
	ret := m.ctrl.Call(m, "Peek", arg0, arg1)
	ret0, _ := ret[0].(*queue.PeekResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Peek indicates an expected call of Peek
func (mr *MockQueueServerMockRecorder) Peek(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peek", reflect.TypeOf((*MockQueueServer)(nil).Peek), arg0, arg1)
}

// Push mocks base method
func (m *MockQueueServer) Push(arg0 context.Context, arg1 *queue.PushRequest) (*queue.PushResponse, error) {
	ret := m.ctrl.Call(m, "Push", arg0, arg1)
	ret0, _ := ret[0].(*queue.PushResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Push indicates an expected call of Push
func (mr *MockQueueServerMockRecorder) Push(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockQueueServer)(nil).Push), arg0, arg1)
}
